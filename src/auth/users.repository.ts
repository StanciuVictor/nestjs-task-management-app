import {
  ConflictException,
  InternalServerErrorException,
} from '@nestjs/common';
import { EntityRepository, Repository } from 'typeorm';
import { AuthCredentialsDto } from './dto/auth-credentials.dto';
import { User } from './user.entity';
import * as bcrypt from 'bcrypt';
@EntityRepository(User)
export class UsersRepository extends Repository<User> {
  /**
   * Takes the user details, creates a new user, and if the username is not already taken, saves the user.
   * Also, encrypts the password with salt and hash
   *
   * @param {AuthCredentialsDto} authCredentialDto
   * @return {*}  {Promise<void>}
   * @memberof UsersRepository
   */
  async createUser(authCredentialDto: AuthCredentialsDto): Promise<void> {
    const { username, password } = authCredentialDto;

    const salt = await bcrypt.genSalt();
    const hashedPassword = await bcrypt.hash(password, salt);

    const user = this.create({
      // Do not specify id because in the Entity the id is automatically generated by typeorm with uuid
      username,
      password: hashedPassword,
    });

    try {
      await this.save(user);
    } catch (err) {
      if (err.code === '23505') {
        // duplicate username 23505 postgres error
        throw new ConflictException('Username already exists');
      } else {
        // If there is an error with code different from 23505, return internal server error
        throw new InternalServerErrorException();
      }
    }
  }
}
