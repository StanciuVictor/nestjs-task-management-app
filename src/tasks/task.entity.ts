// By naming this.task.entity.ts, typeORM know to automatically load it (see app.module.ts)

import { Exclude } from 'class-transformer';
import { User } from 'src/auth/user.entity';
import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';
import { TaskStatus } from './task-status.enum';

@Entity()
export class Task {
  // * Define columns in table

  // Make id the primary string and make it autogenerated
  // Also tell typeorm to create the ids with uuid to make them random and unique, instead of 1, 2, 3, etc.
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  title: string;

  @Column()
  description: string;

  @Column()
  status: TaskStatus;

  /**
   *This is a relation many to one.
   * arg 1 -> type of the user property. Unused => prefix with _
   * arg 2 -> how we acces this property from the 'One' (user) side => user will have a tasks proeprty
   * arg 3 -> if true: whenever we retrieve the tasks from the db, we also fetch the users with it ?
   *
   * @memberof Task
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  @ManyToOne((_type) => User, (user) => user.tasks, { eager: false })
  // Exclude the user property information whenever we send it as plain text (like JSON in the response)
  // Needs Interceptor - transformer
  @Exclude({ toPlainOnly: true })
  user: User;
}
