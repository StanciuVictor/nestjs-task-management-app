import { InternalServerErrorException, Logger } from '@nestjs/common';
import { User } from '../auth/user.entity';
import { EntityRepository, Repository } from 'typeorm';
import { CreateTaskDto } from './dto/create-task.dto';
import { GetTasksFilterDto } from './dto/get-tasks-filter.dto';
import { TaskStatus } from './task-status.enum';
import { Task } from './task.entity';

@EntityRepository(Task)
export class TasksRepository extends Repository<Task> {
  // Instantiate a logger and give it context and enable timestamp
  private logger = new Logger('TasksRepository', { timestamp: true });

  /**
   * Based on the user's info and filters from the request filters
   * all tasks by user AND by parameters from request
   * Also, the Logger logs a short description of the operation to the console if something goes wrong
   *
   * @param {GetTasksFilterDto} filterDto
   * @param {*} user
   * @return {*}  {Promise<Task[]>}
   * @memberof TasksRepository
   */
  async getTasks(filterDto: GetTasksFilterDto, user: User): Promise<Task[]> {
    const { status, search } = filterDto;

    const query = this.createQueryBuilder('task');
    // Select only those tasks whose users match the user that sent the request
    query.where({ user });

    if (status) {
      /* andWhere = we apply a WHERE clause
        :status = custom argument - it's a variable whose value is in the object
        Could also be 'task.status = :anything', { anything } */
      query.andWhere('task.status = :status', { status });
    }

    if (search) {
      query.andWhere(
        /* Find any task where search is LIKE title or LIKE description
          Not necessarily exact match, but partial match also
          LOWER -> transforms everything to lowercase */
        '(LOWER(task.title) LIKE LOWER(:search) OR LOWER(task.description) LIKE LOWER(:search))',
        // For example, “Data” matches D_t_ and %at%, while only the latter would match Data Teams.
        { search: `%${search}%` },
      );
    }

    try {
      const tasks = await query.getMany();
      return tasks;
    } catch (err) {
      this.logger.error(
        `Failed to get tasks for user "${
          user.username
        }". Filters: ${JSON.stringify(filterDto)}`,
        err.stack,
      );
      throw new InternalServerErrorException();
    }
  }

  /**
   * Creates and saves a task in the database based on the parameters received
   *
   * @param {CreateTaskDto} createTaskDto
   * @param {User} user
   * @return {*}  {Promise<Task>}
   * @memberof TasksRepository
   */
  async createTask(createTaskDto: CreateTaskDto, user: User): Promise<Task> {
    const { title, description } = createTaskDto;

    // Create the object based on the repository/entity ?
    const task = this.create({
      // Specify properties that correspond to the properties in the Entity
      // Do not specify id because in the Entity the id is automatically generated by typeorm with uuid
      title,
      description,
      status: TaskStatus.OPEN,
      user,
    });

    // Save the task in the database
    await this.save(task);

    return task;
  }
}
